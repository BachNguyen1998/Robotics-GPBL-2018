

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 05 11:40:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F2553 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _PORTB	set	3969
    57  0000                     _PORTA	set	3968
    58  0000                     _TRISC	set	3988
    59  0000                     _TRISB	set	3987
    60  0000                     _TRISA	set	3986
    61  0000                     _ADCON1	set	4033
    62  0000                     _PORTBbits	set	3969
    63  0000                     _PORTAbits	set	3968
    64  0000                     _PORTC	set	3970
    65                           
    66                           ; #config settings
    67                           
    68                           	psect	cinit
    69  002008                     __pcinit:
    70                           	opt stack 0
    71  002008                     start_initialization:
    72                           	opt stack 0
    73  002008                     __initialization:
    74                           	opt stack 0
    75  002008                     end_of_initialization:
    76                           	opt stack 0
    77  002008                     __end_of__initialization:
    78                           	opt stack 0
    79  002008  0100               	movlb	0
    80  00200A  EFAD  F03E         	goto	_main	;jump to C main() function
    81                           
    82                           	psect	cstackCOMRAM
    83  000001                     __pcstackCOMRAM:
    84                           	opt stack 0
    85  000001                     wait00@k:
    86                           	opt stack 0
    87                           
    88                           ; 2 bytes @ 0x0
    89  000001                     	ds	2
    90  000003                     ??_wait00:
    91                           
    92                           ; 1 bytes @ 0x2
    93  000003                     	ds	1
    94  000004                     wait00@j:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x3
    98  000004                     	ds	2
    99  000006                     wait00@i:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x5
   103  000006                     	ds	2
   104  000008                     ?_left_down:
   105                           	opt stack 0
   106  000008                     ?_right_down:
   107                           	opt stack 0
   108  000008                     ?_left_down_sharp:
   109                           	opt stack 0
   110  000008                     ?_right_down_sharp:
   111                           	opt stack 0
   112  000008                     ?_left_down_small:
   113                           	opt stack 0
   114  000008                     ?_right_down_small:
   115                           	opt stack 0
   116  000008                     ?_straight:
   117                           	opt stack 0
   118                           
   119                           ; 2 bytes @ 0x7
   120  000008                     	ds	2
   121  00000A                     main@state:
   122                           	opt stack 0
   123                           
   124                           ; 2 bytes @ 0x9
   125  00000A                     	ds	2
   126                           
   127 ;;
   128 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   129 ;;
   130 ;; *************** function _main *****************
   131 ;; Defined at:
   132 ;;		line 111 in file "sample.c"
   133 ;; Parameters:    Size  Location     Type
   134 ;;		None
   135 ;; Auto vars:     Size  Location     Type
   136 ;;  state           2    9[COMRAM] int 
   137 ;; Return value:  Size  Location     Type
   138 ;;                  2   60[None  ] int 
   139 ;; Registers used:
   140 ;;		wreg, status,2, status,0, cstack
   141 ;; Tracked objects:
   142 ;;		On entry : 0/0
   143 ;;		On exit  : 0/0
   144 ;;		Unchanged: 0/0
   145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   146 ;;      Params:         0       0       0       0       0       0       0       0       0
   147 ;;      Locals:         2       0       0       0       0       0       0       0       0
   148 ;;      Temps:          0       0       0       0       0       0       0       0       0
   149 ;;      Totals:         2       0       0       0       0       0       0       0       0
   150 ;;Total ram usage:        2 bytes
   151 ;; Hardware stack levels required when called:    2
   152 ;; This function calls:
   153 ;;		_accelerate
   154 ;;		_accelerate_small
   155 ;;		_led_sens
   156 ;;		_left_down
   157 ;;		_left_down_sharp
   158 ;;		_left_down_small
   159 ;;		_right_down
   160 ;;		_right_down_sharp
   161 ;;		_right_down_small
   162 ;;		_straight
   163 ;; This function is called by:
   164 ;;		Startup code after reset
   165 ;; This function uses a non-reentrant model
   166 ;;
   167                           
   168                           	psect	text0
   169  007D5A                     __ptext0:
   170                           	opt stack 0
   171  007D5A                     _main:
   172                           	opt stack 29
   173                           
   174                           ;sample.c: 114: ADCON1 = 0x0F;
   175                           
   176                           ;incstack = 0
   177  007D5A  0E0F               	movlw	15
   178  007D5C  6EC1               	movwf	4033,c	;volatile
   179                           
   180                           ;sample.c: 117: TRISA = 0x20;
   181  007D5E  0E20               	movlw	32
   182  007D60  6E92               	movwf	3986,c	;volatile
   183                           
   184                           ;sample.c: 118: TRISB = 0xFF;
   185  007D62  6893               	setf	3987,c	;volatile
   186                           
   187                           ;sample.c: 119: TRISC = 0x00;
   188  007D64  0E00               	movlw	0
   189  007D66  6E94               	movwf	3988,c	;volatile
   190                           
   191                           ;sample.c: 122: PORTA = 0x00;
   192  007D68  0E00               	movlw	0
   193  007D6A  6E80               	movwf	3968,c	;volatile
   194                           
   195                           ;sample.c: 123: PORTB = 0x00;
   196  007D6C  0E00               	movlw	0
   197  007D6E  6E81               	movwf	3969,c	;volatile
   198                           
   199                           ;sample.c: 124: PORTC = 0x00;
   200  007D70  0E00               	movlw	0
   201  007D72  6E82               	movwf	3970,c	;volatile
   202                           
   203                           ;sample.c: 127: while(PORTAbits.RA5==1){
   204  007D74  D002               	goto	l61
   205  007D76                     
   206                           ;sample.c: 128: led_sens();
   207  007D76  EC38  F03E         	call	_led_sens	;wreg free
   208  007D7A                     l61:
   209  007D7A  BA80               	btfsc	3968,5,c	;volatile
   210  007D7C  D7FC               	goto	l62
   211  007D7E                     u1250:
   212                           
   213                           ;sample.c: 136: led_sens();
   214                           
   215                           ;sample.c: 129: }
   216                           ;sample.c: 133: int state;
   217                           ;sample.c: 135: while(1){
   218  007D7E  EC38  F03E         	call	_led_sens	;wreg free
   219                           
   220                           ;sample.c: 140: if(PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && PORTBbits
      +                          .RB3==1 && PORTBbits.RB4==1){
   221  007D82  A081               	btfss	3969,0,c	;volatile
   222  007D84  A281               	btfss	3969,1,c	;volatile
   223  007D86  D008               	goto	l65
   224  007D88  B481               	btfsc	3969,2,c	;volatile
   225  007D8A  A681               	btfss	3969,3,c	;volatile
   226  007D8C  D005               	goto	l65
   227  007D8E  A881               	btfss	3969,4,c	;volatile
   228  007D90  D003               	goto	l65
   229                           
   230                           ;sample.c: 142: state=left_down_sharp();
   231  007D92  ECE4  F03D         	call	_left_down_sharp	;wreg free
   232  007D96  D041               	goto	L1
   233  007D98                     l65:
   234                           
   235                           ;sample.c: 144: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==1){
   236  007D98  A081               	btfss	3969,0,c	;volatile
   237  007D9A  B281               	btfsc	3969,1,c	;volatile
   238  007D9C  D008               	goto	l67
   239  007D9E  B481               	btfsc	3969,2,c	;volatile
   240  007DA0  A681               	btfss	3969,3,c	;volatile
   241  007DA2  D005               	goto	l67
   242  007DA4  A881               	btfss	3969,4,c	;volatile
   243  007DA6  D003               	goto	l67
   244                           
   245                           ;sample.c: 145: state=left_down();
   246  007DA8  ECCF  F03D         	call	_left_down	;wreg free
   247  007DAC  D045               	goto	L2
   248  007DAE                     l67:
   249                           
   250                           ;sample.c: 147: else if (PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==1){
   251  007DAE  B081               	btfsc	3969,0,c	;volatile
   252  007DB0  B281               	btfsc	3969,1,c	;volatile
   253  007DB2  D008               	goto	l69
   254  007DB4  B481               	btfsc	3969,2,c	;volatile
   255  007DB6  A681               	btfss	3969,3,c	;volatile
   256  007DB8  D005               	goto	l69
   257  007DBA  A881               	btfss	3969,4,c	;volatile
   258  007DBC  D003               	goto	l69
   259                           
   260                           ;sample.c: 148: state=left_down_small();
   261  007DBE  EC52  F03E         	call	_left_down_small	;wreg free
   262  007DC2  D049               	goto	L3
   263  007DC4                     l69:
   264                           
   265                           ;sample.c: 152: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==0){
   266  007DC4  B081               	btfsc	3969,0,c	;volatile
   267  007DC6  A281               	btfss	3969,1,c	;volatile
   268  007DC8  D008               	goto	l71
   269  007DCA  B481               	btfsc	3969,2,c	;volatile
   270  007DCC  A681               	btfss	3969,3,c	;volatile
   271  007DCE  D005               	goto	l71
   272  007DD0  B881               	btfsc	3969,4,c	;volatile
   273  007DD2  D003               	goto	l71
   274                           
   275                           ;sample.c: 153: state=right_down_sharp();
   276  007DD4  EC0E  F03E         	call	_right_down_sharp	;wreg free
   277  007DD8  D04D               	goto	L4
   278  007DDA                     l71:
   279                           
   280                           ;sample.c: 155: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   281  007DDA  B081               	btfsc	3969,0,c	;volatile
   282  007DDC  A281               	btfss	3969,1,c	;volatile
   283  007DDE  D008               	goto	l73
   284  007DE0  B481               	btfsc	3969,2,c	;volatile
   285  007DE2  B681               	btfsc	3969,3,c	;volatile
   286  007DE4  D005               	goto	l73
   287  007DE6  B881               	btfsc	3969,4,c	;volatile
   288  007DE8  D003               	goto	l73
   289                           
   290                           ;sample.c: 156: state=right_down();
   291  007DEA  ECF9  F03D         	call	_right_down	;wreg free
   292  007DEE  D051               	goto	L5
   293  007DF0                     l73:
   294                           
   295                           ;sample.c: 158: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==1){
   296  007DF0  B081               	btfsc	3969,0,c	;volatile
   297  007DF2  A281               	btfss	3969,1,c	;volatile
   298  007DF4  D008               	goto	l75
   299  007DF6  B481               	btfsc	3969,2,c	;volatile
   300  007DF8  B681               	btfsc	3969,3,c	;volatile
   301  007DFA  D005               	goto	l75
   302  007DFC  A881               	btfss	3969,4,c	;volatile
   303  007DFE  D003               	goto	l75
   304                           
   305                           ;sample.c: 159: state=right_down_small();
   306  007E00  EC6F  F03E         	call	_right_down_small	;wreg free
   307  007E04  D055               	goto	L6
   308  007E06                     l75:
   309                           
   310                           ;sample.c: 164: else if (PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   311  007E06  B081               	btfsc	3969,0,c	;volatile
   312  007E08  B281               	btfsc	3969,1,c	;volatile
   313  007E0A  D00C               	goto	l77
   314  007E0C  A481               	btfss	3969,2,c	;volatile
   315  007E0E  B681               	btfsc	3969,3,c	;volatile
   316  007E10  D009               	goto	l77
   317  007E12  B881               	btfsc	3969,4,c	;volatile
   318  007E14  D007               	goto	l77
   319                           
   320                           ;sample.c: 165: state=left_down_sharp();
   321  007E16  ECE4  F03D         	call	_left_down_sharp	;wreg free
   322  007E1A                     L1:
   323  007E1A  C008  F00A         	movff	?_left_down_sharp,main@state
   324  007E1E  C009  F00B         	movff	?_left_down_sharp+1,main@state+1
   325                           
   326                           ;sample.c: 166: }
   327  007E22  D7AD               	goto	u1250
   328  007E24                     l77:
   329                           
   330                           ;sample.c: 167: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   331  007E24  B081               	btfsc	3969,0,c	;volatile
   332  007E26  A281               	btfss	3969,1,c	;volatile
   333  007E28  D00C               	goto	l79
   334  007E2A  A481               	btfss	3969,2,c	;volatile
   335  007E2C  B681               	btfsc	3969,3,c	;volatile
   336  007E2E  D009               	goto	l79
   337  007E30  B881               	btfsc	3969,4,c	;volatile
   338  007E32  D007               	goto	l79
   339                           
   340                           ;sample.c: 168: state=left_down();
   341  007E34  ECCF  F03D         	call	_left_down	;wreg free
   342  007E38                     L2:
   343  007E38  C008  F00A         	movff	?_left_down,main@state
   344  007E3C  C009  F00B         	movff	?_left_down+1,main@state+1
   345                           
   346                           ;sample.c: 169: }
   347  007E40  D79E               	goto	u1250
   348  007E42                     l79:
   349                           
   350                           ;sample.c: 170: else if (PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   351  007E42  A081               	btfss	3969,0,c	;volatile
   352  007E44  A281               	btfss	3969,1,c	;volatile
   353  007E46  D00C               	goto	l81
   354  007E48  A481               	btfss	3969,2,c	;volatile
   355  007E4A  B681               	btfsc	3969,3,c	;volatile
   356  007E4C  D009               	goto	l81
   357  007E4E  B881               	btfsc	3969,4,c	;volatile
   358  007E50  D007               	goto	l81
   359                           
   360                           ;sample.c: 171: state=left_down_small();
   361  007E52  EC52  F03E         	call	_left_down_small	;wreg free
   362  007E56                     L3:
   363  007E56  C008  F00A         	movff	?_left_down_small,main@state
   364  007E5A  C009  F00B         	movff	?_left_down_small+1,main@state+1
   365                           
   366                           ;sample.c: 172: }
   367  007E5E  D78F               	goto	u1250
   368  007E60                     l81:
   369                           
   370                           ;sample.c: 175: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==1){
   371  007E60  A081               	btfss	3969,0,c	;volatile
   372  007E62  B281               	btfsc	3969,1,c	;volatile
   373  007E64  D00C               	goto	l83
   374  007E66  A481               	btfss	3969,2,c	;volatile
   375  007E68  B681               	btfsc	3969,3,c	;volatile
   376  007E6A  D009               	goto	l83
   377  007E6C  A881               	btfss	3969,4,c	;volatile
   378  007E6E  D007               	goto	l83
   379                           
   380                           ;sample.c: 176: state=right_down_sharp();
   381  007E70  EC0E  F03E         	call	_right_down_sharp	;wreg free
   382  007E74                     L4:
   383  007E74  C008  F00A         	movff	?_right_down_sharp,main@state
   384  007E78  C009  F00B         	movff	?_right_down_sharp+1,main@state+1
   385                           
   386                           ;sample.c: 177: }
   387  007E7C  D780               	goto	u1250
   388  007E7E                     l83:
   389                           
   390                           ;sample.c: 178: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==1){
   391  007E7E  A081               	btfss	3969,0,c	;volatile
   392  007E80  B281               	btfsc	3969,1,c	;volatile
   393  007E82  D00C               	goto	l85
   394  007E84  A481               	btfss	3969,2,c	;volatile
   395  007E86  A681               	btfss	3969,3,c	;volatile
   396  007E88  D009               	goto	l85
   397  007E8A  A881               	btfss	3969,4,c	;volatile
   398  007E8C  D007               	goto	l85
   399                           
   400                           ;sample.c: 179: state=right_down();
   401  007E8E  ECF9  F03D         	call	_right_down	;wreg free
   402  007E92                     L5:
   403  007E92  C008  F00A         	movff	?_right_down,main@state
   404  007E96  C009  F00B         	movff	?_right_down+1,main@state+1
   405                           
   406                           ;sample.c: 180: }
   407  007E9A  D771               	goto	u1250
   408  007E9C                     l85:
   409                           
   410                           ;sample.c: 181: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==0){
   411  007E9C  A081               	btfss	3969,0,c	;volatile
   412  007E9E  B281               	btfsc	3969,1,c	;volatile
   413  007EA0  D00C               	goto	l87
   414  007EA2  A481               	btfss	3969,2,c	;volatile
   415  007EA4  A681               	btfss	3969,3,c	;volatile
   416  007EA6  D009               	goto	l87
   417  007EA8  B881               	btfsc	3969,4,c	;volatile
   418  007EAA  D007               	goto	l87
   419                           
   420                           ;sample.c: 182: state=right_down_small();
   421  007EAC  EC6F  F03E         	call	_right_down_small	;wreg free
   422  007EB0                     L6:
   423  007EB0  C008  F00A         	movff	?_right_down_small,main@state
   424  007EB4  C009  F00B         	movff	?_right_down_small+1,main@state+1
   425                           
   426                           ;sample.c: 183: }
   427  007EB8  D762               	goto	u1250
   428  007EBA                     l87:
   429                           
   430                           ;sample.c: 186: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   431  007EBA  A081               	btfss	3969,0,c	;volatile
   432  007EBC  B281               	btfsc	3969,1,c	;volatile
   433  007EBE  D008               	goto	l89
   434  007EC0  B481               	btfsc	3969,2,c	;volatile
   435  007EC2  B681               	btfsc	3969,3,c	;volatile
   436  007EC4  D005               	goto	l89
   437  007EC6  B881               	btfsc	3969,4,c	;volatile
   438  007EC8  D003               	goto	l89
   439                           
   440                           ;sample.c: 187: accelerate();
   441  007ECA  ECAD  F03D         	call	_accelerate	;wreg free
   442                           
   443                           ;sample.c: 188: }
   444  007ECE  D757               	goto	u1250
   445  007ED0                     l89:
   446                           
   447                           ;sample.c: 189: else if (PORTBbits.RB0==0 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   448  007ED0  A081               	btfss	3969,0,c	;volatile
   449  007ED2  A281               	btfss	3969,1,c	;volatile
   450  007ED4  D008               	goto	l91
   451  007ED6  B481               	btfsc	3969,2,c	;volatile
   452  007ED8  B681               	btfsc	3969,3,c	;volatile
   453  007EDA  D005               	goto	l91
   454  007EDC  B881               	btfsc	3969,4,c	;volatile
   455  007EDE  D003               	goto	l91
   456                           
   457                           ;sample.c: 190: accelerate_small();
   458  007EE0  ECBE  F03D         	call	_accelerate_small	;wreg free
   459                           
   460                           ;sample.c: 191: }
   461  007EE4  D74C               	goto	u1250
   462  007EE6                     l91:
   463                           
   464                           ;sample.c: 192: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==0){
   465  007EE6  A081               	btfss	3969,0,c	;volatile
   466  007EE8  B281               	btfsc	3969,1,c	;volatile
   467  007EEA  D008               	goto	l93
   468  007EEC  B481               	btfsc	3969,2,c	;volatile
   469  007EEE  A681               	btfss	3969,3,c	;volatile
   470  007EF0  D005               	goto	l93
   471  007EF2  B881               	btfsc	3969,4,c	;volatile
   472  007EF4  D003               	goto	l93
   473                           
   474                           ;sample.c: 193: accelerate_small();
   475  007EF6  ECBE  F03D         	call	_accelerate_small	;wreg free
   476                           
   477                           ;sample.c: 194: }
   478  007EFA  D741               	goto	u1250
   479  007EFC                     l93:
   480                           
   481                           ;sample.c: 195: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==1){
   482  007EFC  B081               	btfsc	3969,0,c	;volatile
   483  007EFE  A281               	btfss	3969,1,c	;volatile
   484  007F00  D008               	goto	l95
   485  007F02  A481               	btfss	3969,2,c	;volatile
   486  007F04  A681               	btfss	3969,3,c	;volatile
   487  007F06  D005               	goto	l95
   488  007F08  A881               	btfss	3969,4,c	;volatile
   489  007F0A  D003               	goto	l95
   490                           
   491                           ;sample.c: 196: accelerate();
   492  007F0C  ECAD  F03D         	call	_accelerate	;wreg free
   493                           
   494                           ;sample.c: 197: }
   495  007F10  D736               	goto	u1250
   496  007F12                     l95:
   497                           
   498                           ;sample.c: 198: else if (PORTBbits.RB0==1 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==1){
   499  007F12  B081               	btfsc	3969,0,c	;volatile
   500  007F14  B281               	btfsc	3969,1,c	;volatile
   501  007F16  D008               	goto	l97
   502  007F18  A481               	btfss	3969,2,c	;volatile
   503  007F1A  A681               	btfss	3969,3,c	;volatile
   504  007F1C  D005               	goto	l97
   505  007F1E  A881               	btfss	3969,4,c	;volatile
   506  007F20  D003               	goto	l97
   507                           
   508                           ;sample.c: 199: accelerate_small();
   509  007F22  ECBE  F03D         	call	_accelerate_small	;wreg free
   510                           
   511                           ;sample.c: 200: }
   512  007F26  D72B               	goto	u1250
   513  007F28                     l97:
   514                           
   515                           ;sample.c: 201: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==1){
   516  007F28  B081               	btfsc	3969,0,c	;volatile
   517  007F2A  A281               	btfss	3969,1,c	;volatile
   518  007F2C  D008               	goto	l99
   519  007F2E  A481               	btfss	3969,2,c	;volatile
   520  007F30  B681               	btfsc	3969,3,c	;volatile
   521  007F32  D005               	goto	l99
   522  007F34  A881               	btfss	3969,4,c	;volatile
   523  007F36  D003               	goto	l99
   524                           
   525                           ;sample.c: 202: accelerate_small();
   526  007F38  ECBE  F03D         	call	_accelerate_small	;wreg free
   527                           
   528                           ;sample.c: 203: }
   529  007F3C  D720               	goto	u1250
   530  007F3E                     l99:
   531                           
   532                           ;sample.c: 205: else if (PORTBbits.RB0==0 && PORTBbits.RB1==0 && PORTBbits.RB2==0 && POR
      +                          TBbits.RB3==0 && PORTBbits.RB4==0){
   533  007F3E  A081               	btfss	3969,0,c	;volatile
   534  007F40  B281               	btfsc	3969,1,c	;volatile
   535  007F42  D02A               	goto	l101
   536  007F44  A481               	btfss	3969,2,c	;volatile
   537  007F46  B681               	btfsc	3969,3,c	;volatile
   538  007F48  D027               	goto	l101
   539  007F4A  B881               	btfsc	3969,4,c	;volatile
   540  007F4C  D025               	goto	l101
   541                           
   542                           ;sample.c: 206: if (state==1)
   543  007F4E  040A               	decf	main@state,w,c
   544  007F50  100B               	iorwf	main@state+1,w,c
   545  007F52  B4D8               	btfsc	status,2,c
   546                           
   547                           ;sample.c: 207: left_down();
   548  007F54  ECCF  F03D         	call	_left_down	;wreg free
   549                           
   550                           ;sample.c: 208: if (state==3)
   551  007F58  0E03               	movlw	3
   552  007F5A  180A               	xorwf	main@state,w,c
   553  007F5C  100B               	iorwf	main@state+1,w,c
   554  007F5E  B4D8               	btfsc	status,2,c
   555                           
   556                           ;sample.c: 209: left_down_sharp();
   557  007F60  ECE4  F03D         	call	_left_down_sharp	;wreg free
   558                           
   559                           ;sample.c: 210: if (state==5)
   560  007F64  0E05               	movlw	5
   561  007F66  180A               	xorwf	main@state,w,c
   562  007F68  100B               	iorwf	main@state+1,w,c
   563  007F6A  B4D8               	btfsc	status,2,c
   564                           
   565                           ;sample.c: 211: left_down_small();
   566  007F6C  EC52  F03E         	call	_left_down_small	;wreg free
   567                           
   568                           ;sample.c: 212: if (state==2)
   569  007F70  0E02               	movlw	2
   570  007F72  180A               	xorwf	main@state,w,c
   571  007F74  100B               	iorwf	main@state+1,w,c
   572  007F76  B4D8               	btfsc	status,2,c
   573                           
   574                           ;sample.c: 213: right_down();
   575  007F78  ECF9  F03D         	call	_right_down	;wreg free
   576                           
   577                           ;sample.c: 214: if (state==4)
   578  007F7C  0E04               	movlw	4
   579  007F7E  180A               	xorwf	main@state,w,c
   580  007F80  100B               	iorwf	main@state+1,w,c
   581  007F82  B4D8               	btfsc	status,2,c
   582                           
   583                           ;sample.c: 215: right_down_sharp();
   584  007F84  EC0E  F03E         	call	_right_down_sharp	;wreg free
   585                           
   586                           ;sample.c: 216: if (state==6)
   587  007F88  0E06               	movlw	6
   588  007F8A  180A               	xorwf	main@state,w,c
   589  007F8C  100B               	iorwf	main@state+1,w,c
   590  007F8E  A4D8               	btfss	status,2,c
   591  007F90  D6F6               	goto	u1250
   592                           
   593                           ;sample.c: 217: right_down_small();
   594  007F92  EC6F  F03E         	call	_right_down_small	;wreg free
   595                           
   596                           ;sample.c: 219: }
   597  007F96  D6F3               	goto	u1250
   598  007F98                     l101:
   599                           
   600                           ;sample.c: 221: else if (PORTBbits.RB0==1 && PORTBbits.RB1==1 && PORTBbits.RB2==1 && POR
      +                          TBbits.RB3==1 && PORTBbits.RB4==1){
   601  007F98  B081               	btfsc	3969,0,c	;volatile
   602  007F9A  A281               	btfss	3969,1,c	;volatile
   603  007F9C  D02A               	goto	l109
   604  007F9E  B481               	btfsc	3969,2,c	;volatile
   605  007FA0  A681               	btfss	3969,3,c	;volatile
   606  007FA2  D027               	goto	l109
   607  007FA4  A881               	btfss	3969,4,c	;volatile
   608  007FA6  D025               	goto	l109
   609                           
   610                           ;sample.c: 222: if (state==1)
   611  007FA8  040A               	decf	main@state,w,c
   612  007FAA  100B               	iorwf	main@state+1,w,c
   613  007FAC  B4D8               	btfsc	status,2,c
   614                           
   615                           ;sample.c: 223: left_down();
   616  007FAE  ECCF  F03D         	call	_left_down	;wreg free
   617                           
   618                           ;sample.c: 224: if (state==3)
   619  007FB2  0E03               	movlw	3
   620  007FB4  180A               	xorwf	main@state,w,c
   621  007FB6  100B               	iorwf	main@state+1,w,c
   622  007FB8  B4D8               	btfsc	status,2,c
   623                           
   624                           ;sample.c: 225: left_down_sharp();
   625  007FBA  ECE4  F03D         	call	_left_down_sharp	;wreg free
   626                           
   627                           ;sample.c: 226: if (state==5)
   628  007FBE  0E05               	movlw	5
   629  007FC0  180A               	xorwf	main@state,w,c
   630  007FC2  100B               	iorwf	main@state+1,w,c
   631  007FC4  B4D8               	btfsc	status,2,c
   632                           
   633                           ;sample.c: 227: left_down_small();
   634  007FC6  EC52  F03E         	call	_left_down_small	;wreg free
   635                           
   636                           ;sample.c: 228: if (state==2)
   637  007FCA  0E02               	movlw	2
   638  007FCC  180A               	xorwf	main@state,w,c
   639  007FCE  100B               	iorwf	main@state+1,w,c
   640  007FD0  B4D8               	btfsc	status,2,c
   641                           
   642                           ;sample.c: 229: right_down();
   643  007FD2  ECF9  F03D         	call	_right_down	;wreg free
   644                           
   645                           ;sample.c: 230: if (state==4)
   646  007FD6  0E04               	movlw	4
   647  007FD8  180A               	xorwf	main@state,w,c
   648  007FDA  100B               	iorwf	main@state+1,w,c
   649  007FDC  B4D8               	btfsc	status,2,c
   650                           
   651                           ;sample.c: 231: right_down_sharp();
   652  007FDE  EC0E  F03E         	call	_right_down_sharp	;wreg free
   653                           
   654                           ;sample.c: 232: if (state==6)
   655  007FE2  0E06               	movlw	6
   656  007FE4  180A               	xorwf	main@state,w,c
   657  007FE6  100B               	iorwf	main@state+1,w,c
   658  007FE8  A4D8               	btfss	status,2,c
   659  007FEA  D6C9               	goto	u1250
   660                           
   661                           ;sample.c: 233: right_down_small();
   662  007FEC  EC6F  F03E         	call	_right_down_small	;wreg free
   663                           
   664                           ;sample.c: 234: }
   665  007FF0  D6C6               	goto	u1250
   666  007FF2                     l109:
   667                           
   668                           ;sample.c: 237: else{
   669                           ;sample.c: 238: state=straight();
   670  007FF2  EC23  F03E         	call	_straight	;wreg free
   671  007FF6  C008  F00A         	movff	?_straight,main@state
   672  007FFA  C009  F00B         	movff	?_straight+1,main@state+1
   673  007FFE  D6BF               	goto	u1250
   674  008000                     __end_of_main:
   675                           	opt stack 0
   676                           status	equ	0xFD8
   677                           
   678 ;; *************** function _straight *****************
   679 ;; Defined at:
   680 ;;		line 79 in file "sample.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;                  2    7[COMRAM] int 
   687 ;; Registers used:
   688 ;;		wreg, status,2, status,0, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   694 ;;      Params:         2       0       0       0       0       0       0       0       0
   695 ;;      Locals:         0       0       0       0       0       0       0       0       0
   696 ;;      Temps:          0       0       0       0       0       0       0       0       0
   697 ;;      Totals:         2       0       0       0       0       0       0       0       0
   698 ;;Total ram usage:        2 bytes
   699 ;; Hardware stack levels used:    1
   700 ;; Hardware stack levels required when called:    1
   701 ;; This function calls:
   702 ;;		_wait00
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text1
   709  007C46                     __ptext1:
   710                           	opt stack 0
   711  007C46                     _straight:
   712                           	opt stack 29
   713                           
   714                           ;sample.c: 80: PORTC=0x03;
   715                           
   716                           ;incstack = 0
   717  007C46  0E03               	movlw	3
   718  007C48  6E82               	movwf	3970,c	;volatile
   719                           
   720                           ;sample.c: 81: wait00(8);
   721  007C4A  0E00               	movlw	0
   722  007C4C  6E02               	movwf	wait00@k+1,c
   723  007C4E  0E08               	movlw	8
   724  007C50  6E01               	movwf	wait00@k,c
   725  007C52  EC8C  F03E         	call	_wait00	;wreg free
   726                           
   727                           ;sample.c: 82: PORTC=0x00;
   728  007C56  0E00               	movlw	0
   729  007C58  6E82               	movwf	3970,c	;volatile
   730                           
   731                           ;sample.c: 83: wait00(10);
   732  007C5A  0E00               	movlw	0
   733  007C5C  6E02               	movwf	wait00@k+1,c
   734  007C5E  0E0A               	movlw	10
   735  007C60  6E01               	movwf	wait00@k,c
   736  007C62  EC8C  F03E         	call	_wait00	;wreg free
   737                           
   738                           ;sample.c: 84: return 0;
   739  007C66  0E00               	movlw	0
   740  007C68  6E09               	movwf	?_straight+1,c
   741  007C6A  0E00               	movlw	0
   742  007C6C  6E08               	movwf	?_straight,c
   743  007C6E  0012               	return	
   744  007C70                     __end_of_straight:
   745                           	opt stack 0
   746                           status	equ	0xFD8
   747                           
   748 ;; *************** function _right_down_small *****************
   749 ;; Defined at:
   750 ;;		line 69 in file "sample.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  2    7[COMRAM] int 
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   764 ;;      Params:         2       0       0       0       0       0       0       0       0
   765 ;;      Locals:         0       0       0       0       0       0       0       0       0
   766 ;;      Temps:          0       0       0       0       0       0       0       0       0
   767 ;;      Totals:         2       0       0       0       0       0       0       0       0
   768 ;;Total ram usage:        2 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    1
   771 ;; This function calls:
   772 ;;		_wait00
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text2
   779  007CDE                     __ptext2:
   780                           	opt stack 0
   781  007CDE                     _right_down_small:
   782                           	opt stack 29
   783                           
   784                           ;sample.c: 70: PORTC=0x03;
   785                           
   786                           ;incstack = 0
   787  007CDE  0E03               	movlw	3
   788  007CE0  6E82               	movwf	3970,c	;volatile
   789                           
   790                           ;sample.c: 71: wait00(1);
   791  007CE2  0E00               	movlw	0
   792  007CE4  6E02               	movwf	wait00@k+1,c
   793  007CE6  0E01               	movlw	1
   794  007CE8  6E01               	movwf	wait00@k,c
   795  007CEA  EC8C  F03E         	call	_wait00	;wreg free
   796                           
   797                           ;sample.c: 72: PORTC=0x01;
   798  007CEE  0E01               	movlw	1
   799  007CF0  6E82               	movwf	3970,c	;volatile
   800                           
   801                           ;sample.c: 73: wait00(3);
   802  007CF2  0E00               	movlw	0
   803  007CF4  6E02               	movwf	wait00@k+1,c
   804  007CF6  0E03               	movlw	3
   805  007CF8  6E01               	movwf	wait00@k,c
   806  007CFA  EC8C  F03E         	call	_wait00	;wreg free
   807                           
   808                           ;sample.c: 74: PORTC=0x00;
   809  007CFE  0E00               	movlw	0
   810  007D00  6E82               	movwf	3970,c	;volatile
   811                           
   812                           ;sample.c: 75: wait00(8);
   813  007D02  0E00               	movlw	0
   814  007D04  6E02               	movwf	wait00@k+1,c
   815  007D06  0E08               	movlw	8
   816  007D08  6E01               	movwf	wait00@k,c
   817  007D0A  EC8C  F03E         	call	_wait00	;wreg free
   818                           
   819                           ;sample.c: 76: return 6;
   820  007D0E  0E00               	movlw	0
   821  007D10  6E09               	movwf	?_right_down_small+1,c
   822  007D12  0E06               	movlw	6
   823  007D14  6E08               	movwf	?_right_down_small,c
   824  007D16  0012               	return	
   825  007D18                     __end_of_right_down_small:
   826                           	opt stack 0
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _right_down_sharp *****************
   830 ;; Defined at:
   831 ;;		line 49 in file "sample.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2    7[COMRAM] int 
   838 ;; Registers used:
   839 ;;		wreg, status,2, status,0, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   845 ;;      Params:         2       0       0       0       0       0       0       0       0
   846 ;;      Locals:         0       0       0       0       0       0       0       0       0
   847 ;;      Temps:          0       0       0       0       0       0       0       0       0
   848 ;;      Totals:         2       0       0       0       0       0       0       0       0
   849 ;;Total ram usage:        2 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    1
   852 ;; This function calls:
   853 ;;		_wait00
   854 ;; This function is called by:
   855 ;;		_main
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text3
   860  007C1C                     __ptext3:
   861                           	opt stack 0
   862  007C1C                     _right_down_sharp:
   863                           	opt stack 29
   864                           
   865                           ;sample.c: 52: PORTC=0x01;
   866                           
   867                           ;incstack = 0
   868  007C1C  0E01               	movlw	1
   869  007C1E  6E82               	movwf	3970,c	;volatile
   870                           
   871                           ;sample.c: 53: wait00(14);
   872  007C20  0E00               	movlw	0
   873  007C22  6E02               	movwf	wait00@k+1,c
   874  007C24  0E0E               	movlw	14
   875  007C26  6E01               	movwf	wait00@k,c
   876  007C28  EC8C  F03E         	call	_wait00	;wreg free
   877                           
   878                           ;sample.c: 54: PORTC=0x00;
   879  007C2C  0E00               	movlw	0
   880  007C2E  6E82               	movwf	3970,c	;volatile
   881                           
   882                           ;sample.c: 55: wait00(14);
   883  007C30  0E00               	movlw	0
   884  007C32  6E02               	movwf	wait00@k+1,c
   885  007C34  0E0E               	movlw	14
   886  007C36  6E01               	movwf	wait00@k,c
   887  007C38  EC8C  F03E         	call	_wait00	;wreg free
   888                           
   889                           ;sample.c: 56: return 4;
   890  007C3C  0E00               	movlw	0
   891  007C3E  6E09               	movwf	?_right_down_sharp+1,c
   892  007C40  0E04               	movlw	4
   893  007C42  6E08               	movwf	?_right_down_sharp,c
   894  007C44  0012               	return	
   895  007C46                     __end_of_right_down_sharp:
   896                           	opt stack 0
   897                           status	equ	0xFD8
   898                           
   899 ;; *************** function _right_down *****************
   900 ;; Defined at:
   901 ;;		line 29 in file "sample.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;		None
   906 ;; Return value:  Size  Location     Type
   907 ;;                  2    7[COMRAM] int 
   908 ;; Registers used:
   909 ;;		wreg, status,2, status,0, cstack
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 0/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   915 ;;      Params:         2       0       0       0       0       0       0       0       0
   916 ;;      Locals:         0       0       0       0       0       0       0       0       0
   917 ;;      Temps:          0       0       0       0       0       0       0       0       0
   918 ;;      Totals:         2       0       0       0       0       0       0       0       0
   919 ;;Total ram usage:        2 bytes
   920 ;; Hardware stack levels used:    1
   921 ;; Hardware stack levels required when called:    1
   922 ;; This function calls:
   923 ;;		_wait00
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text4
   930  007BF2                     __ptext4:
   931                           	opt stack 0
   932  007BF2                     _right_down:
   933                           	opt stack 29
   934                           
   935                           ;sample.c: 32: PORTC=0x01;
   936                           
   937                           ;incstack = 0
   938  007BF2  0E01               	movlw	1
   939  007BF4  6E82               	movwf	3970,c	;volatile
   940                           
   941                           ;sample.c: 33: wait00(1);
   942  007BF6  0E00               	movlw	0
   943  007BF8  6E02               	movwf	wait00@k+1,c
   944  007BFA  0E01               	movlw	1
   945  007BFC  6E01               	movwf	wait00@k,c
   946  007BFE  EC8C  F03E         	call	_wait00	;wreg free
   947                           
   948                           ;sample.c: 34: PORTC=0x00;
   949  007C02  0E00               	movlw	0
   950  007C04  6E82               	movwf	3970,c	;volatile
   951                           
   952                           ;sample.c: 35: wait00(1);
   953  007C06  0E00               	movlw	0
   954  007C08  6E02               	movwf	wait00@k+1,c
   955  007C0A  0E01               	movlw	1
   956  007C0C  6E01               	movwf	wait00@k,c
   957  007C0E  EC8C  F03E         	call	_wait00	;wreg free
   958                           
   959                           ;sample.c: 36: return 2;
   960  007C12  0E00               	movlw	0
   961  007C14  6E09               	movwf	?_right_down+1,c
   962  007C16  0E02               	movlw	2
   963  007C18  6E08               	movwf	?_right_down,c
   964  007C1A  0012               	return	
   965  007C1C                     __end_of_right_down:
   966                           	opt stack 0
   967                           status	equ	0xFD8
   968                           
   969 ;; *************** function _left_down_small *****************
   970 ;; Defined at:
   971 ;;		line 59 in file "sample.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;		None
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;                  2    7[COMRAM] int 
   978 ;; Registers used:
   979 ;;		wreg, status,2, status,0, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   985 ;;      Params:         2       0       0       0       0       0       0       0       0
   986 ;;      Locals:         0       0       0       0       0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0       0       0       0       0
   988 ;;      Totals:         2       0       0       0       0       0       0       0       0
   989 ;;Total ram usage:        2 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; Hardware stack levels required when called:    1
   992 ;; This function calls:
   993 ;;		_wait00
   994 ;; This function is called by:
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text5
  1000  007CA4                     __ptext5:
  1001                           	opt stack 0
  1002  007CA4                     _left_down_small:
  1003                           	opt stack 29
  1004                           
  1005                           ;sample.c: 60: PORTC=0x03;
  1006                           
  1007                           ;incstack = 0
  1008  007CA4  0E03               	movlw	3
  1009  007CA6  6E82               	movwf	3970,c	;volatile
  1010                           
  1011                           ;sample.c: 61: wait00(1);
  1012  007CA8  0E00               	movlw	0
  1013  007CAA  6E02               	movwf	wait00@k+1,c
  1014  007CAC  0E01               	movlw	1
  1015  007CAE  6E01               	movwf	wait00@k,c
  1016  007CB0  EC8C  F03E         	call	_wait00	;wreg free
  1017                           
  1018                           ;sample.c: 62: PORTC=0x02;
  1019  007CB4  0E02               	movlw	2
  1020  007CB6  6E82               	movwf	3970,c	;volatile
  1021                           
  1022                           ;sample.c: 63: wait00(3);
  1023  007CB8  0E00               	movlw	0
  1024  007CBA  6E02               	movwf	wait00@k+1,c
  1025  007CBC  0E03               	movlw	3
  1026  007CBE  6E01               	movwf	wait00@k,c
  1027  007CC0  EC8C  F03E         	call	_wait00	;wreg free
  1028                           
  1029                           ;sample.c: 64: PORTC=0x00;
  1030  007CC4  0E00               	movlw	0
  1031  007CC6  6E82               	movwf	3970,c	;volatile
  1032                           
  1033                           ;sample.c: 65: wait00(8);
  1034  007CC8  0E00               	movlw	0
  1035  007CCA  6E02               	movwf	wait00@k+1,c
  1036  007CCC  0E08               	movlw	8
  1037  007CCE  6E01               	movwf	wait00@k,c
  1038  007CD0  EC8C  F03E         	call	_wait00	;wreg free
  1039                           
  1040                           ;sample.c: 66: return 5;
  1041  007CD4  0E00               	movlw	0
  1042  007CD6  6E09               	movwf	?_left_down_small+1,c
  1043  007CD8  0E05               	movlw	5
  1044  007CDA  6E08               	movwf	?_left_down_small,c
  1045  007CDC  0012               	return	
  1046  007CDE                     __end_of_left_down_small:
  1047                           	opt stack 0
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _left_down_sharp *****************
  1051 ;; Defined at:
  1052 ;;		line 39 in file "sample.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  2    7[COMRAM] int 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1066 ;;      Params:         2       0       0       0       0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1069 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    1
  1073 ;; This function calls:
  1074 ;;		_wait00
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text6
  1081  007BC8                     __ptext6:
  1082                           	opt stack 0
  1083  007BC8                     _left_down_sharp:
  1084                           	opt stack 29
  1085                           
  1086                           ;sample.c: 42: PORTC=0x02;
  1087                           
  1088                           ;incstack = 0
  1089  007BC8  0E02               	movlw	2
  1090  007BCA  6E82               	movwf	3970,c	;volatile
  1091                           
  1092                           ;sample.c: 43: wait00(14);
  1093  007BCC  0E00               	movlw	0
  1094  007BCE  6E02               	movwf	wait00@k+1,c
  1095  007BD0  0E0E               	movlw	14
  1096  007BD2  6E01               	movwf	wait00@k,c
  1097  007BD4  EC8C  F03E         	call	_wait00	;wreg free
  1098                           
  1099                           ;sample.c: 44: PORTC=0x00;
  1100  007BD8  0E00               	movlw	0
  1101  007BDA  6E82               	movwf	3970,c	;volatile
  1102                           
  1103                           ;sample.c: 45: wait00(14);
  1104  007BDC  0E00               	movlw	0
  1105  007BDE  6E02               	movwf	wait00@k+1,c
  1106  007BE0  0E0E               	movlw	14
  1107  007BE2  6E01               	movwf	wait00@k,c
  1108  007BE4  EC8C  F03E         	call	_wait00	;wreg free
  1109                           
  1110                           ;sample.c: 46: return 3;
  1111  007BE8  0E00               	movlw	0
  1112  007BEA  6E09               	movwf	?_left_down_sharp+1,c
  1113  007BEC  0E03               	movlw	3
  1114  007BEE  6E08               	movwf	?_left_down_sharp,c
  1115  007BF0  0012               	return	
  1116  007BF2                     __end_of_left_down_sharp:
  1117                           	opt stack 0
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function _left_down *****************
  1121 ;; Defined at:
  1122 ;;		line 19 in file "sample.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;		None
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  2    7[COMRAM] int 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2, status,0, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1136 ;;      Params:         2       0       0       0       0       0       0       0       0
  1137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1139 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1140 ;;Total ram usage:        2 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    1
  1143 ;; This function calls:
  1144 ;;		_wait00
  1145 ;; This function is called by:
  1146 ;;		_main
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text7
  1151  007B9E                     __ptext7:
  1152                           	opt stack 0
  1153  007B9E                     _left_down:
  1154                           	opt stack 29
  1155                           
  1156                           ;sample.c: 22: PORTC=0x02;
  1157                           
  1158                           ;incstack = 0
  1159  007B9E  0E02               	movlw	2
  1160  007BA0  6E82               	movwf	3970,c	;volatile
  1161                           
  1162                           ;sample.c: 23: wait00(1);
  1163  007BA2  0E00               	movlw	0
  1164  007BA4  6E02               	movwf	wait00@k+1,c
  1165  007BA6  0E01               	movlw	1
  1166  007BA8  6E01               	movwf	wait00@k,c
  1167  007BAA  EC8C  F03E         	call	_wait00	;wreg free
  1168                           
  1169                           ;sample.c: 24: PORTC=0x00;
  1170  007BAE  0E00               	movlw	0
  1171  007BB0  6E82               	movwf	3970,c	;volatile
  1172                           
  1173                           ;sample.c: 25: wait00(1);
  1174  007BB2  0E00               	movlw	0
  1175  007BB4  6E02               	movwf	wait00@k+1,c
  1176  007BB6  0E01               	movlw	1
  1177  007BB8  6E01               	movwf	wait00@k,c
  1178  007BBA  EC8C  F03E         	call	_wait00	;wreg free
  1179                           
  1180                           ;sample.c: 26: return 1;
  1181  007BBE  0E00               	movlw	0
  1182  007BC0  6E09               	movwf	?_left_down+1,c
  1183  007BC2  0E01               	movlw	1
  1184  007BC4  6E08               	movwf	?_left_down,c
  1185  007BC6  0012               	return	
  1186  007BC8                     __end_of_left_down:
  1187                           	opt stack 0
  1188                           status	equ	0xFD8
  1189                           
  1190 ;; *************** function _led_sens *****************
  1191 ;; Defined at:
  1192 ;;		line 102 in file "sample.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  2   55[None  ] int 
  1199 ;; Registers used:
  1200 ;;		None
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1206 ;;      Params:         0       0       0       0       0       0       0       0       0
  1207 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1209 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1210 ;;Total ram usage:        0 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; This function calls:
  1213 ;;		Nothing
  1214 ;; This function is called by:
  1215 ;;		_main
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text8
  1220  007C70                     __ptext8:
  1221                           	opt stack 0
  1222  007C70                     _led_sens:
  1223                           	opt stack 30
  1224                           
  1225                           ;sample.c: 104: PORTAbits.RA0 = PORTBbits.RB0;
  1226                           
  1227                           ;incstack = 0
  1228  007C70  A081               	btfss	3969,0,c	;volatile
  1229  007C72  D002               	bra	u45
  1230  007C74  8080               	bsf	3968,0,c	;volatile
  1231  007C76  D001               	bra	u47
  1232  007C78                     u45:
  1233  007C78  9080               	bcf	3968,0,c	;volatile
  1234  007C7A                     u47:
  1235                           
  1236                           ;sample.c: 105: PORTAbits.RA1 = PORTBbits.RB1;
  1237  007C7A  A281               	btfss	3969,1,c	;volatile
  1238  007C7C  D002               	bra	u55
  1239  007C7E  8280               	bsf	3968,1,c	;volatile
  1240  007C80  D001               	bra	u57
  1241  007C82                     u55:
  1242  007C82  9280               	bcf	3968,1,c	;volatile
  1243  007C84                     u57:
  1244                           
  1245                           ;sample.c: 106: PORTAbits.RA2 = PORTBbits.RB2;
  1246  007C84  A481               	btfss	3969,2,c	;volatile
  1247  007C86  D002               	bra	u65
  1248  007C88  8480               	bsf	3968,2,c	;volatile
  1249  007C8A  D001               	bra	u67
  1250  007C8C                     u65:
  1251  007C8C  9480               	bcf	3968,2,c	;volatile
  1252  007C8E                     u67:
  1253                           
  1254                           ;sample.c: 107: PORTAbits.RA3 = PORTBbits.RB3;
  1255  007C8E  A681               	btfss	3969,3,c	;volatile
  1256  007C90  D002               	bra	u75
  1257  007C92  8680               	bsf	3968,3,c	;volatile
  1258  007C94  D001               	bra	u77
  1259  007C96                     u75:
  1260  007C96  9680               	bcf	3968,3,c	;volatile
  1261  007C98                     u77:
  1262                           
  1263                           ;sample.c: 108: PORTAbits.RA4 = PORTBbits.RB4;
  1264  007C98  A881               	btfss	3969,4,c	;volatile
  1265  007C9A  D002               	bra	u85
  1266  007C9C  8880               	bsf	3968,4,c	;volatile
  1267  007C9E  D001               	bra	u87
  1268  007CA0                     u85:
  1269  007CA0  9880               	bcf	3968,4,c	;volatile
  1270  007CA2                     u87:
  1271  007CA2  0012               	return		;funcret
  1272  007CA4                     __end_of_led_sens:
  1273                           	opt stack 0
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _accelerate_small *****************
  1277 ;; Defined at:
  1278 ;;		line 94 in file "sample.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  2   52[None  ] int 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    1
  1299 ;; This function calls:
  1300 ;;		_wait00
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text9
  1307  007B7C                     __ptext9:
  1308                           	opt stack 0
  1309  007B7C                     _accelerate_small:
  1310                           	opt stack 29
  1311                           
  1312                           ;sample.c: 95: PORTC=0x03;
  1313                           
  1314                           ;incstack = 0
  1315  007B7C  0E03               	movlw	3
  1316  007B7E  6E82               	movwf	3970,c	;volatile
  1317                           
  1318                           ;sample.c: 96: wait00(8);
  1319  007B80  0E00               	movlw	0
  1320  007B82  6E02               	movwf	wait00@k+1,c
  1321  007B84  0E08               	movlw	8
  1322  007B86  6E01               	movwf	wait00@k,c
  1323  007B88  EC8C  F03E         	call	_wait00	;wreg free
  1324                           
  1325                           ;sample.c: 97: PORTC=0x00;
  1326  007B8C  0E00               	movlw	0
  1327  007B8E  6E82               	movwf	3970,c	;volatile
  1328                           
  1329                           ;sample.c: 98: wait00(10);
  1330  007B90  0E00               	movlw	0
  1331  007B92  6E02               	movwf	wait00@k+1,c
  1332  007B94  0E0A               	movlw	10
  1333  007B96  6E01               	movwf	wait00@k,c
  1334  007B98  EC8C  F03E         	call	_wait00	;wreg free
  1335  007B9C  0012               	return	
  1336  007B9E                     __end_of_accelerate_small:
  1337                           	opt stack 0
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _accelerate *****************
  1341 ;; Defined at:
  1342 ;;		line 87 in file "sample.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  2   49[None  ] int 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    1
  1363 ;; This function calls:
  1364 ;;		_wait00
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text10
  1371  007B5A                     __ptext10:
  1372                           	opt stack 0
  1373  007B5A                     _accelerate:
  1374                           	opt stack 29
  1375                           
  1376                           ;sample.c: 88: PORTC=0x03;
  1377                           
  1378                           ;incstack = 0
  1379  007B5A  0E03               	movlw	3
  1380  007B5C  6E82               	movwf	3970,c	;volatile
  1381                           
  1382                           ;sample.c: 89: wait00(8);
  1383  007B5E  0E00               	movlw	0
  1384  007B60  6E02               	movwf	wait00@k+1,c
  1385  007B62  0E08               	movlw	8
  1386  007B64  6E01               	movwf	wait00@k,c
  1387  007B66  EC8C  F03E         	call	_wait00	;wreg free
  1388                           
  1389                           ;sample.c: 90: PORTC=0x00;
  1390  007B6A  0E00               	movlw	0
  1391  007B6C  6E82               	movwf	3970,c	;volatile
  1392                           
  1393                           ;sample.c: 91: wait00(10);
  1394  007B6E  0E00               	movlw	0
  1395  007B70  6E02               	movwf	wait00@k+1,c
  1396  007B72  0E0A               	movlw	10
  1397  007B74  6E01               	movwf	wait00@k,c
  1398  007B76  EC8C  F03E         	call	_wait00	;wreg free
  1399  007B7A  0012               	return	
  1400  007B7C                     __end_of_accelerate:
  1401                           	opt stack 0
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _wait00 *****************
  1405 ;; Defined at:
  1406 ;;		line 7 in file "sample.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  k               2    0[COMRAM] short 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  i               2    5[COMRAM] short 
  1411 ;;  j               2    3[COMRAM] short 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  2    0[COMRAM] int 
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1421 ;;      Params:         2       0       0       0       0       0       0       0       0
  1422 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1423 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1424 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1425 ;;Total ram usage:        7 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_left_down
  1431 ;;		_right_down
  1432 ;;		_left_down_sharp
  1433 ;;		_right_down_sharp
  1434 ;;		_left_down_small
  1435 ;;		_right_down_small
  1436 ;;		_straight
  1437 ;;		_accelerate
  1438 ;;		_accelerate_small
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text11
  1443  007D18                     __ptext11:
  1444                           	opt stack 0
  1445  007D18                     _wait00:
  1446                           	opt stack 29
  1447                           
  1448                           ;sample.c: 10: short i;
  1449                           ;sample.c: 11: short j;
  1450                           ;sample.c: 12: for(j=0;j<k;j++){
  1451                           
  1452                           ;incstack = 0
  1453  007D18  0E00               	movlw	0
  1454  007D1A  6E05               	movwf	wait00@j+1,c
  1455  007D1C  0E00               	movlw	0
  1456  007D1E  6E04               	movwf	wait00@j,c
  1457  007D20  D011               	goto	l21
  1458  007D22                     
  1459                           ;sample.c: 13: for(i=0;i<3000;i++){
  1460  007D22  0E00               	movlw	0
  1461  007D24  6E07               	movwf	wait00@i+1,c
  1462  007D26  0E00               	movlw	0
  1463  007D28  6E06               	movwf	wait00@i,c
  1464  007D2A                     l1111:
  1465  007D2A  BE07               	btfsc	wait00@i+1,7,c
  1466  007D2C  D006               	goto	l23
  1467  007D2E  0EB8               	movlw	184
  1468  007D30  5C06               	subwf	wait00@i,w,c
  1469  007D32  0E0B               	movlw	11
  1470  007D34  5807               	subwfb	wait00@i+1,w,c
  1471  007D36  B0D8               	btfsc	status,0,c
  1472  007D38  D003               	goto	u1230
  1473  007D3A                     l23:
  1474  007D3A  4A06               	infsnz	wait00@i,f,c
  1475  007D3C  2A07               	incf	wait00@i+1,f,c
  1476  007D3E  D7F5               	goto	l1111
  1477  007D40                     u1230:
  1478  007D40  4A04               	infsnz	wait00@j,f,c
  1479  007D42  2A05               	incf	wait00@j+1,f,c
  1480  007D44                     l21:
  1481  007D44  5001               	movf	wait00@k,w,c
  1482  007D46  5C04               	subwf	wait00@j,w,c
  1483  007D48  5005               	movf	wait00@j+1,w,c
  1484  007D4A  0A80               	xorlw	128
  1485  007D4C  6E03               	movwf	??_wait00& (0+255),c
  1486  007D4E  5002               	movf	wait00@k+1,w,c
  1487  007D50  0A80               	xorlw	128
  1488  007D52  5803               	subwfb	??_wait00& (0+255),w,c
  1489  007D54  B0D8               	btfsc	status,0,c
  1490  007D56  0012               	return	
  1491  007D58  D7E4               	goto	l22
  1492  007D5A                     __end_of_wait00:
  1493                           	opt stack 0
  1494  0000                     status	equ	0xFD8
  1495                           status	equ	0xFD8
  1496                           
  1497                           	psect	rparam
  1498  0000                     status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_left_down
    _main->_left_down_sharp
    _main->_left_down_small
    _main->_right_down
    _main->_right_down_sharp
    _main->_right_down_small
    _main->_straight
    _straight->_wait00
    _right_down_small->_wait00
    _right_down_sharp->_wait00
    _right_down->_wait00
    _left_down_small->_wait00
    _left_down_sharp->_wait00
    _left_down->_wait00
    _accelerate_small->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14785
                                              9 COMRAM     2     2      0
                         _accelerate
                   _accelerate_small
                           _led_sens
                          _left_down
                    _left_down_sharp
                    _left_down_small
                         _right_down
                   _right_down_sharp
                   _right_down_small
                           _straight
 ---------------------------------------------------------------------------------
 (1) _straight                                             2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down_small                                     2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down_sharp                                     2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _right_down                                           2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down_small                                      2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down_sharp                                      2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _left_down                                            2     0      2    1612
                                              7 COMRAM     2     0      2
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _accelerate_small                                     0     0      0    1612
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1612
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1612
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _accelerate
     _wait00
   _accelerate_small
     _wait00
   _led_sens
   _left_down
     _wait00
   _left_down_sharp
     _wait00
   _left_down_small
     _wait00
   _right_down
     _wait00
   _right_down_sharp
     _wait00
   _right_down_small
     _wait00
   _straight
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 05 11:40:02 2018

                       l21 7D44                         l22 7D22                         l23 7D3A  
                       l61 7D7A                         l62 7D76                         l71 7DDA  
                       l81 7E60                         l73 7DF0                         l65 7D98  
                       l91 7EE6                         l83 7E7E                         l75 7E06  
                       l67 7DAE                         l93 7EFC                         l85 7E9C  
                       l77 7E24                         l69 7DC4                         l95 7F12  
                       l87 7EBA                         l79 7E42                         l97 7F28  
                       l89 7ED0                         l99 7F3E                         u45 7C78  
                       u55 7C82                         u47 7C7A                         u65 7C8C  
                       u57 7C84                         u75 7C96                         u67 7C8E  
                       u85 7CA0                         u77 7C98                         u87 7CA2  
                      l101 7F98                        l109 7FF2                       l1111 7D2A  
                     u1230 7D40                       u1250 7D7E                       _main 7D5A  
                     start 2000               ___param_bank 000000                      ?_main 0001  
                    _PORTA 000F80                      _PORTB 000F81                      _PORTC 000F82  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    status 000FD8            __initialization 2008               __end_of_main 8000  
                   ??_main 000A              __activetblptr 000000                     _ADCON1 000FC1  
         __end_of_led_sens 7CA4                     _wait00 7D18   __size_of_left_down_sharp 002A  
        ?_accelerate_small 0001   __size_of_left_down_small 003A  __size_of_right_down_sharp 002A  
__size_of_right_down_small 003A         ??_accelerate_small 0008           __end_of_straight 7C70  
               __accesstop 0060    __end_of__initialization 2008              ___rparam_used 000001  
           __pcstackCOMRAM 0001                 _accelerate 7B5A         __size_of_left_down 002A  
                  ?_wait00 0001                  ?_led_sens 0001          ??_left_down_sharp 000A  
        ??_left_down_small 000A                    __Hparam 0000                    __Lparam 0000  
              ?_accelerate 0001                  ?_straight 0008                    __pcinit 2008  
                  __ramtop 0800            __size_of_wait00 0042          __end_of_left_down 7BC8  
                  __ptext0 7D5A                    __ptext1 7C46                    __ptext2 7CDE  
                  __ptext3 7C1C                    __ptext4 7BF2                    __ptext5 7CA4  
                  __ptext6 7BC8                    __ptext7 7B9E                    __ptext8 7C70  
                  __ptext9 7B7C           _right_down_sharp 7C1C           _right_down_small 7CDE  
     end_of_initialization 2008                 ??_led_sens 0001                    wait00@i 0006  
                  wait00@j 0004                    wait00@k 0001                 _right_down 7BF2  
               ??_straight 000A                  _PORTAbits 000F80                  _PORTBbits 000F81  
      __size_of_accelerate 0022  __size_of_accelerate_small 0022             __end_of_wait00 7D5A  
      start_initialization 2008                ?_right_down 0008                   ??_wait00 0003  
          _left_down_sharp 7BC8            _left_down_small 7CA4          __size_of_led_sens 0034  
 __end_of_right_down_sharp 7C46   __end_of_right_down_small 7D18               ??_accelerate 0008  
        __size_of_straight 002A                  _left_down 7B9E        __size_of_right_down 002A  
       __end_of_accelerate 7B7C           _accelerate_small 7B7C    __end_of_left_down_sharp 7BF2  
  __end_of_left_down_small 7CDE                 ?_left_down 0008                  main@state 000A  
                 __Hrparam 0000                   __Lrparam 0000                   __ptext10 7B5A  
                 __ptext11 7D18                   _led_sens 7C70              __size_of_main 02A6  
             ??_right_down 000A           ?_left_down_sharp 0008           ?_left_down_small 0008  
                 _straight 7C46                ??_left_down 000A         __end_of_right_down 7C1C  
        ?_right_down_sharp 0008          ?_right_down_small 0008         ??_right_down_sharp 000A  
       ??_right_down_small 000A   __end_of_accelerate_small 7B9E  
